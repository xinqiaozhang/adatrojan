{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Trojan Detection Container (trojai-example)",
  "technique": "Gradient Boosting Classifier with Bagging and Calibration",
  "technique_description": "Computes gradients wrt example data and synthetic data and singular values of last classification layer weights; trains a Gradient Boosting Classifer with Bagging and Calibration.",
  "technique_changes": "Now using synthetic gradients + Using sigmoid calibration + Using bagging with gradient boosting trees + calibration + Using gradients with respect to input data and singular values of last classification layer weights instead of the previous method which just used last classification layer weights.",
  "technique_type": ["Weight Analysis", "Jacobian Inspection"],
  "commit_id": "d1f65f3b181d20c032640092c0b07de53f659ad2",
  "repo_name": "https://github.com/xinqiaozhang/adatrojan",
  "required": [],
  "additionalProperties": false,
  "type": "object",
  "properties": {
	"infer_cyber_model_skew": {
		"description": "Skew parameters for all models of the cyber round.",
		"type": "number",
		"minimum": 0.01,
		"maximum": 5.0,
		"suggested_minimum": 0.3,
		"suggested_maximum": 0.75
	},
	"train_input_features":  {
		"description": "The input features for training.",
		"type": "integer",
		"minimum": 5,
		"maximum": 2000,
		"suggested_minimum": 750,
		"suggested_maximum": 2200
	},
	"train_weight_table_random_state": {
		"description": "Random state for weight table during training.",
		"type": "integer",
		"minimum": 1,
		"maximum": 200,
		"suggested_minimum": 75,
		"suggested_maximum": 150
	},
	"train_weight_table_params_mean": {
		"description": "Mean of the normal distribution used for the weight table.",
		"type": "number",
		"minimum": 0,
		"maximum": 1.0,
		"suggested_minimum": 0.25,
		"suggested_maximum": 0.75
	},
	"train_weight_table_params_std": {
		"description": "Standard deviation of the normal distribution used for the weight table.",
		"type": "number",
		"minimum": 0,
		"maximum": 1.0,
		"suggested_minimum": 0.01,
		"suggested_maximum": 0.1
	},
	"train_weight_table_params_scaler": {
		"description": "Multiply all items of the weight table by this number (float).",
		"type": "number",
		"minimum": 0,
		"maximum": 5.0,
		"suggested_minimum": 0.1,
		"suggested_maximum": 2.5
	},
	"train_random_forest_regressor_param_n_estimators": {
		"description": "Number of trees in the forest.",
		"type": "integer",
		"minimum": 1,
		"maximum": 200,
		"suggested_minimum": 75,
		"suggested_maximum": 150
	},
	"train_random_forest_regressor_param_criterion": {
		"description": "Function to measure the quality of a split.",
		"enum": ["squared_error", "absolute_error", "friedman_mse", "poisson"]
	},
	"train_random_forest_regressor_param_max_depth": {
		"description": "The maximum depth of the tree",
		"type": "integer",
		"minimum": 1,
		"maximum": 20,
		"suggested_minimum": 1,
		"suggested_maximum": 20
	},
	"train_random_forest_regressor_param_min_samples_split": {
		"description": "The minimum number of samples required to split an internal node.",
		"type": "integer",
		"minimum": 1,
		"maximum": 5,
		"suggested_minimum": 1,
		"suggested_maximum": 2
	},
	"train_random_forest_regressor_param_min_samples_leaf": {
		"description": "The minimum number of samples required to be at a leaf node.",
		"type": "integer",
		"minimum": 1,
		"maximum": 5,
		"suggested_minimum": 1,
		"suggested_maximum": 2
	},
	"train_random_forest_regressor_param_min_weight_fraction_leaf": {
		"description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node.",
		"type": "number",
		"minimum": 0.0,
		"maximum": 1.0,
		"suggested_minimum": 0.0,
		"suggested_maximum": 1.0
	},
	"train_random_forest_regressor_param_max_features": {
		"description": "The number of features to consider when looking for the best split.",
		"type": "number",
		"minimum": 0.0,
		"maximum": 2.0,
		"suggested_minimum": 0.0,
		"suggested_maximum": 2.0
	},
	"train_random_forest_regressor_param_min_impurity_decrease": {
		"description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.",
		"type": "number",
		"minimum": 0.0,
		"maximum": 2.0,
		"suggested_minimum": 0.0,
		"suggested_maximum": 2.0
	}
  }
}
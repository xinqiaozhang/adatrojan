{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Trojan Detection Container (Aug2023 Round)",
  "technique": "Two Neural Network Binary Classifiers",
  "technique_description": "Extracts model weights and trains two separate Binary Classifier NN - one for fc models and the other for cnns.",
  "technique_changes": "Made separate classifiers.",
  "technique_type": ["Weight Analysis"],
  "commit_id": "7d845a188cbdcee8da11b2992525f5c7d441f0e4",
  "repo_name": "https://github.com/xinqiaozhang/adatrojan/",
  "required": [],
  "additionalProperties": false,
  "type": "object",
  "properties": {
	"train_input_features":  {
		"description": "The input features for training.",
		"type": "integer",
		"minimum": 5,
		"maximum": 500,
		"suggested_minimum": 20,
		"suggested_maximum": 200
	},
	  "train_weight_rso_seed": {
		"description": "Random state seed for weights during training.",
		"type": "integer",
		"minimum": 1,
		"maximum": 99999999,
		"suggested_minimum": 1234,
		"suggested_maximum": 12345
	},
	"train_weight_params_mean": {
		"description": "Mean of the normal distribution used for the weight table.",
		"type": "number",
		"minimum": 0,
		"maximum": 1.0,
		"suggested_minimum": 0.25,
		"suggested_maximum": 0.75
	},
	"train_weight_params_std": {
		"description": "Standard deviation of the normal distribution used for the weight table.",
		"type": "number",
		"minimum": 0,
		"maximum": 1.0,
		"suggested_minimum": 0.01,
		"suggested_maximum": 0.1
	},
	"train_random_forest_regressor_param_n_estimators": {
		"description": "Number of trees in the forest.",
		"type": "integer",
		"minimum": 1,
		"maximum": 200,
		"suggested_minimum": 75,
		"suggested_maximum": 150
	},
	"train_random_forest_regressor_param_criterion": {
		"description": "Function to measure the quality of a split.",
		"enum": ["squared_error", "absolute_error", "friedman_mse", "poisson"]
	},
	"train_random_forest_regressor_param_max_depth": {
		"description": "The maximum depth of the tree",
		"type": "integer",
		"minimum": 1,
		"maximum": 20,
		"suggested_minimum": 1,
		"suggested_maximum": 20
	},
	"train_random_forest_regressor_param_min_samples_split": {
		"description": "The minimum number of samples required to split an internal node.",
		"type": "integer",
		"minimum": 1,
		"maximum": 5,
		"suggested_minimum": 1,
		"suggested_maximum": 2
	},
	"train_random_forest_regressor_param_min_samples_leaf": {
		"description": "The minimum number of samples required to be at a leaf node.",
		"type": "integer",
		"minimum": 1,
		"maximum": 5,
		"suggested_minimum": 1,
		"suggested_maximum": 2
	},
	"train_random_forest_regressor_param_min_weight_fraction_leaf": {
		"description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node.",
		"type": "number",
		"minimum": 0.0,
		"maximum": 1.0,
		"suggested_minimum": 0.0,
		"suggested_maximum": 1.0
	},
	"train_random_forest_regressor_param_max_features": {
		"description": "The number of features to consider when looking for the best split.",
		"type": "number",
		"minimum": 0.0,
		"maximum": 2.0,
		"suggested_minimum": 0.0,
		"suggested_maximum": 2.0
	},
	"train_random_forest_regressor_param_min_impurity_decrease": {
		"description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.",
		"type": "number",
		"minimum": 0.0,
		"maximum": 2.0,
		"suggested_minimum": 0.0,
		"suggested_maximum": 2.0
	}
  }
}
